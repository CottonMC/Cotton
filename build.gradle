//import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "Fabric"
			url = "http://maven.modmuss50.me/"
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "net.fabricmc:fabric-loom:0.2.0-SNAPSHOT" //Don't backdate before 0.2.0; features in this version prevent messy workarounds!
		classpath "com.github.jengelman.gradle.plugins:shadow:5.0.0"
	}
}

plugins {
	id "com.jfrog.artifactory" version "4.9.0"
}

apply plugin: "maven-publish"
apply plugin: net.fabricmc.loom.LoomGradlePlugin

apply from: "project.gradle";

if (ext.needsShadow) {
	apply plugin: "com.github.johnrengelman.shadow"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = ext.projectName;
group = ext.group;
version = ext.version + ((ext.snapshot) ? "-SNAPSHOT" : "");

repositories {
	mavenCentral()
}

dependencies {
	minecraft "com.mojang:minecraft:"+project.ext.minecraft;
	mappings "net.fabricmc:yarn:"+project.ext.mappings;
	modCompile "net.fabricmc:fabric-loader:"+project.ext.loader;
	if (project.ext.fabricMod!=null) {
		modCompile "net.fabricmc:fabric:"+project.ext.fabricMod;
	}
	if (project.ext.silkMod!=null) {
		modCompile "io.github.prospector.silk:SilkAPI:"+project.ext.silkMod;
	}
	if (project.ext.jankson!=null) {
		if (needsShadow) {
			//Jankson will be shadowed
			shadow "blue.endless:jankson:"+project.ext.jankson;
			implementation "blue.endless:jankson:"+project.ext.jankson;
		} else {
			System.out.println("#################################################################");
			System.out.println("# Shadow is disabled. Jankson will be ommitted from this build! #");
			System.out.println("#################################################################");
		}
	}
}

task sourcesJar(type: Jar) {
	baseName = archivesBaseName
	classifier = "sources"
	from sourceSets.main.allSource
	from sourceSets.main.resources
}

if (ext.needsShadow) {
	shadowJar {
		if (project.ext.jankson!=null) {
			relocate 'blue.endless.jankson', 'io.github.cottonmc.repackage.blue.endless.jankson';
		}
		
		classifier = "shadow"
		configurations = [project.configurations.shadow]
	}

	//If we're using shadow, we need to let remap know it's remapping the shadowJar
	remapJar {
		dependsOn shadowJar
		jar = shadowJar.archivePath
	}
}


if(rootProject.file('private.gradle').exists()) { //Publishing details
	apply from: 'private.gradle'
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java

			artifactId = project.ext.projectName;


			pom.withXml {
				def pomFile = asNode()
				def depsNode = pomFile.get("dependencies")
				pomFile.remove(depsNode)

				def newDeps = pomFile.appendNode("dependencies")
				configurations.modCompile.getResolvedConfiguration().getFirstLevelModuleDependencies().each {
					def artifactNode = newDeps.appendNode("dependency")
					artifactNode.appendNode('groupId', it.moduleGroup)
					artifactNode.appendNode('artifactId', it.moduleName)
					artifactNode.appendNode('version', it.moduleVersion)
				}
			}
			artifacts = [
				artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}-shadow.jar") { //release jar - file location not provided anywhere in loom
					classifier null
					builtBy remapJar
				},
				artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}-shadow-dev.jar") { //release jar - file location not provided anywhere in loom
					classifier "dev"
					builtBy remapJar
				},
				artifact (tasks.sourcesJar)
			]
		}
	}
	/* Supply an ext block in private.gradle like so:

	   ext { mavenSnapshotDir="file:///some_local_directory_path" }

	 * and then just run "./gradlew publish" to save the artifacts to the specified directory, in a way that they can be
	 * served by apache or your favorite httpd and behave like a maven repo. Complete with verification hashes.
	 */
	repositories {
		if (rootProject.ext.has("localMavenUrl")) {
			maven {
				url = rootProject.ext.localMavenUrl
			}
		}
	}
}

artifactory {
	if (project.hasProperty("artifactoryUsername")) {
		contextUrl = 'http://server.bbkr.space:8081/artifactory/'
		publish {
			repository {
				if (version.contains("SNAPSHOT")) {
					repoKey = "libs-snapshot"
				} else {
					repoKey = "libs-release"
				}
				username = artifactoryUsername
				password = artifactoryPassword
			}
			defaults {
				publications('maven')

				publishArtifacts = true
				publishPom = true
			}
		}
	} else {
		println "Cannot configure artifactory; please define ext.artifactoryUsername and ext.artifactoryPassword before running artifactoryPublish"
	}
}