buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "com.github.jengelman.gradle.plugins:shadow:5.0.0"
	}
}

plugins {
	id 'fabric-loom' version '0.2.4-SNAPSHOT'
	id 'maven-publish'
	id "com.jfrog.artifactory" version "4.9.0"
}

apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

if(rootProject.file('private.gradle').exists()) { //Publishing details
	apply from: 'private.gradle'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
	refmapName = 'mixins.cotton.refmap.json'
}

repositories {
	mavenCentral()
	maven { url "http://server.bbkr.space:8081/artifactory/libs-snapshot/" }
	maven { url "http://server.bbkr.space:8081/artifactory/libs-release/" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modApi "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi "io.github.cottonmc:LibCD:${project.libcd_version}"
	include "io.github.cottonmc:LibCD:${project.libcd_version}"

	compileOnly ("com.google.code.findbugs:jsr305:3.0.2") { transitive = false }
	implementation ("blue.endless:jankson:1.1.2") { transitive = false }
	shadow ("blue.endless:jankson:1.1.2") { transitive = false }

	testImplementation ("org.junit.jupiter:junit-jupiter-api:5.4.1") //{ transitive=false; };
	testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:5.4.1") //{ transitive=false; };
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

shadowJar {
	relocate 'blue.endless.jankson', 'io.github.cottonmc.repackage.blue.endless.jankson'
	classifier = "shadow"
	configurations = [project.configurations.shadow]
}

remapJar {
	dependsOn shadowJar
	jar = shadowJar.archivePath
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		maven(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			//artifact(jar) {
			//	builtBy remapJar
			//}
			artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}-shadow.jar") { //release jar - file location not provided anywhere in loom
				classifier null
				builtBy remapJar
			}

			artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}-shadow-dev.jar") { //release jar - file location not provided anywhere in loom
				classifier "dev"
				builtBy remapJar
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

artifactory {
	if (project.hasProperty("artifactoryUsername")) {
		contextUrl = 'http://server.bbkr.space:8081/artifactory/'
		publish {
			repository {
				if (version.contains("SNAPSHOT")) {
					repoKey = "libs-snapshot"
				} else {
					repoKey = "libs-release"
				}
				username = artifactoryUsername
				password = artifactoryPassword
			}
			defaults {
				publications('maven')

				publishArtifacts = true
				publishPom = true
			}
		}
	} else {
		println "Cannot configure artifactory; please define ext.artifactoryUsername and ext.artifactoryPassword before running artifactoryPublish"
	}
}

test {
	useJUnitPlatform()
}